OVault extends the ERC-4626 tokenized vault standard with LayerZero’s omnichain messaging, allowing users to deposit assets from any chain and receive yield-bearing vault shares on their preferred network—all in a single transaction. This removes the need for manual bridging, network switching, or fragmented liquidity, and enables seamless cross-chain DeFi composability.
Docs › /v2/concepts/applications/ovault-standard
Key Benefits

    Unified Liquidity: All deposits are aggregated into a single vault on a "hub" chain, creating deeper liquidity and more efficient yield generation.
    Seamless User Experience: Users can deposit or redeem from any chain, and receive assets or shares on any chain, with a single transaction.
    Cross-Chain Composability: Vault shares are Omnichain Fungible Tokens (OFTs) and can be used as collateral, traded, or integrated into DeFi protocols on any supported chain.
    Automatic Error Recovery: If a cross-chain operation fails, the OVault Composer provides permissionless recovery (refunds/retries), so users never lose funds.
    Configurable Security: Vault operators can set DVNs, executors, and rate limits to match their risk profile.

How It Works

    Hub-and-Spoke Model:
        The vault (ERC-4626) and composer live on a single "hub" chain.
        Users interact from any "spoke" chain via OFT tokens and the composer contract.
    Two OFT Meshes:
        One for the underlying asset (e.g., USDT).
        One for the vault shares (OFTs representing yield-bearing positions).
    Composer Contract:
        Orchestrates cross-chain vault operations (deposit/redeem) and routes output tokens to the user’s chosen chain.
    No Direct Vault Interaction:
        Users send assets/shares to the composer with instructions; the composer handles all vault logic and cross-chain transfers.

Example Use Cases

    Yield-bearing stablecoins accessible from any chain.
    Real World Asset (RWA) tokenization with global access.
    Cross-chain lending collateral (vault shares as collateral).
    Omnichain yield aggregation.

References

    Docs › /v2/concepts/applications/ovault-standard
    Docs › /v2/developers/evm/ovault/overview

# Omnichain Vaults (OVault)

URL: https://docs.layerzero.network/v2/concepts/applications/ovault-standard

Version: Endpoint V2Omnichain Vaults (OVault)Omnichain Vaults extend the ERC-4626 tokenized vault standard with LayerZero's omnichain messaging, enabling users to deposit assets from any chain and receive yield-bearing vault shares on their preferred network in a single transaction.
What Are Omnichain Vaults?​• Beyond single-chain vaults:
Traditional ERC-4626 vaults restrict users to depositing and withdrawing on a single blockchain. OVault removes this limitation by making vault shares omnichain fungible tokens (OFTs) that can move seamlessly between any LayerZero-connected chain.
• Hub-and-spoke architecture:
The vault itself lives on one "hub" chain, while users can interact with it from any "spoke" chain. This design maintains the security and simplicity of a single vault while providing universal access across the entire omnichain ecosystem.Mental Model: Two OFT Meshes + Vault​
To understand OVault architecture, think of it as two separate OFT meshes (asset + share) connected by an ERC-4626 vault and composer contract on a hub chain:• Asset OFT Mesh: Enables the vault's underlying assets (e.g., USDT) to move across chains using standard OFT implementation
• Share OFT Mesh: Enables vault shares to move across chains, using OFTAdapter (lockbox model) on the hub chain and standard OFT elsewhere
• ERC-4626 Vault: Lives on the hub chain, implements standard deposit/redeem operations
• OVault Composer: Orchestrates cross-chain vault operations by receiving assets or shares with special instructions and coordinating the vault interactions with OFT transfersKey insight: Users never interact directly with the vault - they send assets or shares cross-chain to the composer with encoded instructions, and the composer handles all vault operations and transfers out to the target destination.
This design leverages existing LayerZero standards (OFT + Composer) to make asset movement seamless between multiple blockchains.
Why Omnichain Vaults Matter​• Unified liquidity across chains:
Instead of fragmenting liquidity across multiple single-chain vaults, OVault aggregates all deposits into one vault. This creates deeper liquidity, more efficient yield generation, and simpler management for vault operators.
• Seamless user experience:
Users no longer need to bridge assets manually, switch networks, or manage multiple transactions. A single transaction handles the entire flow—from depositing assets on one chain to receiving shares on another.
• Cross-chain DeFi composability:
Vault shares as OFTs can be used as collateral, traded on DEXs, or integrated into any DeFi protocol on any chain. This unlocks new possibilities for yield-bearing assets in the omnichain ecosystem.How Omnichain Vaults Work​1. Asset deposit flow:
When a user deposits assets from a source chain, the OVault system:• Transfers the assets to the hub chain via LayerZero's OFT standard
• Executes the deposit workflow via LayerZero's Composer standard which:Deposits assets into the ERC-4626 vault
Mints vault shares
Sends the shares to the user's desired destination chain address via the OFT standard
• Deposits assets into the ERC-4626 vault
• Mints vault shares
• Sends the shares to the user's desired destination chain address via the OFT standard
2. Share redemption flow:
When redeeming shares for underlying assets:• shares are sent from the user's current chain back to the hub
• The vault redeems shares for the underlying assets
• assets are then sent to the user's chosen destination chain address
3. Automatic error recovery:
If any step fails (due to slippage, gas issues, or configuration errors), the OVault Composer provides permissionless recovery mechanisms to refund or retry the operation, ensuring users never lose funds.Core Design Principles​• Full ERC-4626 compatibility:
OVault maintains complete compatibility with the ERC-4626 standard. The vault contract itself is a standard implementation—the omnichain functionality is added through LayerZero's OFT and Composer patterns.
• Deterministic pricing:
Unlike AMM-based systems, ERC-4626 vaults use deterministic share pricing based on totalAssets / totalSupply. This eliminates the need for oracles and reduces cross-chain complexity.
• Permissionless recovery:
All error recovery functions are permissionless—anyone can trigger refunds or retries for failed operations. This ensures that users always have a path to recover their assets without relying on admin intervention.
• Configurable security:
Vault operators can configure their security settings, including DVN selection, executor parameters, and rate limits, to match their risk tolerance and use case requirements.Common Use Cases​• Yield-bearing stablecoins:
Issue stablecoins backed by yield-generating vaults where users can mint and redeem from any chain while the underlying yield accrues to all holders.
• Real World Asset (RWA) tokenization:
Deploy RWA vaults on regulated chains while providing global access. Users worldwide can gain exposure to real-world yields without jurisdictional limitations.
• Cross-chain lending collateral:
Use vault shares as collateral on any chain. As the shares appreciate from yield accrual, borrowing power automatically increases.
• Omnichain yield aggregation:
Aggregate yield strategies from multiple chains into a single vault, giving users exposure to the best opportunities across the entire ecosystem.Integration with LayerZero Standards​• Built on OFT Standard:
Both the asset and share tokens use LayerZero's OFT standard for cross-chain transfers, ensuring consistent supply accounting and seamless movement between chains.
• Leverages Composer Pattern:
The OVault Composer handles complex multi-step operations (receive assets → deposit → send shares) in a single atomic transaction with automatic error handling.
• Protocol-level security:
Inherits LayerZero's security model with configurable DVNs, executors, and rate limiting to protect cross-chain operations.Further Reading​
For implementation guides and technical details:• EVM OVault Implementation
• OFT Standard
• Composer Standard

---
Note: This content was extracted from the LayerZero documentation. Tables and special components have been converted to plain text for better readability.

# OVault EVM Implementation

URL: https://docs.layerzero.network/v2/developers/evm/ovault/overview

Version: Endpoint V2OVault EVM Implementation
Deploy omnichain ERC-4626 vaults that enable users to deposit assets from any chain and receive shares on a preferred network through a single transaction.Prerequisites​
Before implementing OVault, you should understand:1. OFT Standard: How Omnichain Fungible Tokens work and what the typical deployment looks like
2. Composer Pattern: Understanding of composeMsg encoding and cross-chain message workflows
3. ERC-4626 Vaults: How the tokenized vault standard interface works for deposit/redeem operationsOVault uses a hub-and-spoke model where:• Hub Chain: Hosts the ERC4626 vault, the VaultComposer, and ShareOFTAdapter (lockbox model)
• Spoke Chains: Host AssetOFTs and ShareOFTs that connect to the hubShareOFTAdapter(Hub)ERC4626(Hub)Composer(Hub)AssetOFT(Hub)AssetOFT(Arbitrum)User(Arbitrum)ShareOFTAdapter(Hub)ERC4626(Hub)Composer(Hub)AssetOFT(Hub)AssetOFT(Arbitrum)User(Arbitrum)#mermaid-svg-1836326{font-family:"trebuchet ms",verdana,arial,sans-serif;font-size:16px;fill:#ccc;}@keyframes edge-animation-frame{from{stroke-dashoffset:0;}}@keyframes dash{to{stroke-dashoffset:0;}}#mermaid-svg-1836326 .edge-animation-slow{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 50s linear infinite;stroke-linecap:round;}#mermaid-svg-1836326 .edge-animation-fast{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 20s linear infinite;stroke-linecap:round;}#mermaid-svg-1836326 .error-icon{fill:#a44141;}#mermaid-svg-1836326 .error-text{fill:#ddd;stroke:#ddd;}#mermaid-svg-1836326 .edge-thickness-normal{stroke-width:1px;}#mermaid-svg-1836326 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-svg-1836326 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-svg-1836326 .edge-thickness-invisible{stroke-width:0;fill:none;}#mermaid-svg-1836326 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-svg-1836326 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-svg-1836326 .marker{fill:lightgrey;stroke:lightgrey;}#mermaid-svg-1836326 .marker.cross{stroke:lightgrey;}#mermaid-svg-1836326 svg{font-family:"trebuchet ms",verdana,arial,sans-serif;font-size:16px;}#mermaid-svg-1836326 p{margin:0;}#mermaid-svg-1836326 .actor{stroke:#ccc;fill:#1f2020;}#mermaid-svg-1836326 text.actor>tspan{fill:lightgrey;stroke:none;}#mermaid-svg-1836326 .actor-line{stroke:#ccc;}#mermaid-svg-1836326 .messageLine0{stroke-width:1.5;stroke-dasharray:none;stroke:lightgrey;}#mermaid-svg-1836326 .messageLine1{stroke-width:1.5;stroke-dasharray:2,2;stroke:lightgrey;}#mermaid-svg-1836326 #arrowhead path{fill:lightgrey;stroke:lightgrey;}#mermaid-svg-1836326 .sequenceNumber{fill:black;}#mermaid-svg-1836326 #sequencenumber{fill:lightgrey;}#mermaid-svg-1836326 #crosshead path{fill:lightgrey;stroke:lightgrey;}#mermaid-svg-1836326 .messageText{fill:lightgrey;stroke:none;}#mermaid-svg-1836326 .labelBox{stroke:#ccc;fill:#1f2020;}#mermaid-svg-1836326 .labelText,#mermaid-svg-1836326 .labelText>tspan{fill:lightgrey;stroke:none;}#mermaid-svg-1836326 .loopText,#mermaid-svg-1836326 .loopText>tspan{fill:lightgrey;stroke:none;}#mermaid-svg-1836326 .loopLine{stroke-width:2px;stroke-dasharray:2,2;stroke:#ccc;fill:#ccc;}#mermaid-svg-1836326 .note{stroke:hsl(180, 0%, 18.3529411765%);fill:hsl(180, 1.5873015873%, 28.3529411765%);}#mermaid-svg-1836326 .noteText,#mermaid-svg-1836326 .noteText>tspan{fill:rgb(183.8476190475, 181.5523809523, 181.5523809523);stroke:none;}#mermaid-svg-1836326 .activation0{fill:hsl(180, 1.5873015873%, 28.3529411765%);stroke:#ccc;}#mermaid-svg-1836326 .activation1{fill:hsl(180, 1.5873015873%, 28.3529411765%);stroke:#ccc;}#mermaid-svg-1836326 .activation2{fill:hsl(180, 1.5873015873%, 28.3529411765%);stroke:#ccc;}#mermaid-svg-1836326 .actorPopupMenu{position:absolute;}#mermaid-svg-1836326 .actorPopupMenuPanel{position:absolute;fill:#1f2020;box-shadow:0px 8px 16px 0px rgba(0,0,0,0.2);filter:drop-shadow(3px 5px 2px rgb(0 0 0 / 0.4));}#mermaid-svg-1836326 .actor-man line{stroke:#ccc;fill:#1f2020;}#mermaid-svg-1836326 .actor-man circle,#mermaid-svg-1836326 line{stroke:#ccc;fill:#1f2020;stroke-width:2px;}#mermaid-svg-1836326 :root{--mermaid-font-family:"trebuchet ms",verdana,arial,sans-serif;}Arbitrum ChainHub ChainDetects asset deposit operationSingle transaction: Assets → Shares (same chain)send(asset, dstEid, composer, composeMsg)LayerZero transferlzReceive() → lzCompose()deposit(assets)shares mintedsend(shares, arbitrum, recipient)LayerZero transfer (shares)shares deliveredMental ModelThink of OVault as two separate OFT meshes (asset + share) connected by an ERC4626 vault and Composer contract on a hub chain. Users send assets or shares to the composer with special instructions, and the composer orchestrates vault operations and delivers the output token.
Installation​
Below, you can find instructions for installing the OVault contracts:
OVault in a new project​
To start using LayerZero OVault contracts in a new project, use the LayerZero CLI tool, create-lz-oapp. The CLI tool allows developers to create any omnichain application in <4 minutes! Get started by running the following from your command line:```
LZ_ENABLE_OVAULT_EXAMPLE=1 npx create-lz-oapp@latest --example ovault-evm
```OVault Contracts​
Your OVault implementation requires four core contracts. Here's how to properly inherit from the base contracts:
Asset OFT (All Chains)​```
// SPDX-License-Identifier: UNLICENSEDpragma solidity ^0.8.20;import { Ownable } from "@openzeppelin/contracts/access/Ownable.sol";import { OFT } from "@layerzerolabs/oft-evm/contracts/OFT.sol";/** * @title MyAssetOFT * @notice ERC20 representation of the vault's asset token on a spoke chain for cross-chain functionality * @dev This contract represents the vault's underlying asset on spoke chains. It inherits from * LayerZero's OFT (Omnichain Fungible Token) to enable seamless cross-chain transfers of the * vault's asset tokens between the hub chain and spoke chains. * * The asset OFT acts as a bridgeable ERC20 representation of the vault's collateral asset, allowing * users to move their assets across supported chains while maintaining fungibility. */contract MyAssetOFT is OFT {    /**     * @notice Constructs the Asset OFT contract     * @dev Initializes the OFT with LayerZero endpoint and sets up ownership     * @param _name The name of the asset token     * @param _symbol The symbol of the asset token     * @param _lzEndpoint The address of the LayerZero endpoint on this chain     * @param _delegate The address that will have owner privileges     */    constructor(        string memory _name,        string memory _symbol,        address _lzEndpoint,        address _delegate    ) OFT(_name, _symbol, _lzEndpoint, _delegate) Ownable(_delegate) {        // NOTE: Uncomment the line below if you need to mint initial supply        // This can be useful for testing or if the asset needs initial liquidity        // _mint(msg.sender, 1 ether);    }}
```MyAssetOFT is a standard ERC20 token that will be the asset inside the ERC4626 vault.
If your intended vault asset is already an OFT (e.g., USDT0), you do not need to deploy this contract. The asset token must be deployed on at least the hub chain.
Vault + Share Adapter (Hub Chain)​```
// SPDX-License-Identifier: UNLICENSEDpragma solidity ^0.8.22;import { Ownable } from "@openzeppelin/contracts/access/Ownable.sol";import { ERC20 } from "@openzeppelin/contracts/token/ERC20/ERC20.sol";import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";import { ERC4626 } from "@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol";import { OFTAdapter } from "@layerzerolabs/oft-evm/contracts/OFTAdapter.sol";/** * @title MyERC4626 * @notice ERC4626 tokenized vault implementation for cross-chain vault operations * @dev SECURITY CONSIDERATIONS: *      - Donation/inflation attacks on empty or low-liquidity vaults *      - Share price manipulation via large donations before first deposit *      - Slippage during deposit/redeem operations in low-liquidity conditions *      - First depositor advantage scenarios * *      See OpenZeppelin ERC4626 documentation for full risk analysis: *      https://docs.openzeppelin.com/contracts/4.x/erc4626#inflation-attack * *      MITIGATIONS: *      - OpenZeppelin v4.9+ includes virtual assets/shares to mitigate inflation attacks *      - Deployers should consider initial deposits to prevent manipulation */contract MyERC4626 is ERC4626 {    /**     * @notice Creates a new ERC4626 vault     * @dev Initializes the vault with virtual assets/shares protection against inflation attacks     * @param _name The name of the vault token     * @param _symbol The symbol of the vault token     * @param _asset The underlying asset that the vault accepts     */    constructor(string memory _name, string memory _symbol, IERC20 _asset) ERC20(_name, _symbol) ERC4626(_asset) {}}/** * @title MyShareOFTAdapter * @notice OFT adapter for vault shares enabling cross-chain transfers * @dev The share token MUST be an OFT adapter (lockbox). * @dev A mint-burn adapter would not work since it transforms `ShareERC20::totalSupply()` */contract MyShareOFTAdapter is OFTAdapter {    /**     * @notice Creates a new OFT adapter for vault shares     * @dev Sets up cross-chain token transfer capabilities for vault shares     * @param _token The vault share token to adapt for cross-chain transfers     * @param _lzEndpoint The LayerZero endpoint for this chain     * @param _delegate The account with administrative privileges     */    constructor(        address _token,        address _lzEndpoint,        address _delegate    ) OFTAdapter(_token, _lzEndpoint, _delegate) Ownable(_delegate) {}}
```MyERC4626 is the standard tokenized vault contract. Given an asset for a valid ERC20 contract in the constructor, the vault will create a corresponding share token.
This share must then be transformed into an Omnichain Fungible Token using MyShareOFTAdapter.
Composer (Hub Chain)​```
// SPDX-License-Identifier: UNLICENSEDpragma solidity ^0.8.22;import { VaultComposerSync } from "@layerzerolabs/ovault-evm/contracts/VaultComposerSync.sol";/** * @title MyOVaultComposer * @notice Cross-chain vault composer enabling omnichain vault operations via LayerZero */contract MyOVaultComposer is VaultComposerSync {    /**     * @notice Creates a new cross-chain vault composer     * @dev Initializes the composer with vault and OFT contracts for omnichain operations     * @param _ovault The vault contract implementing ERC4626 for deposit/redeem operations     * @param _assetOFT The OFT contract for cross-chain asset transfers     * @param _shareOFT The OFT contract for cross-chain share transfers     */    constructor(        address _ovault,        address _assetOFT,        address _shareOFT    ) VaultComposerSync(_ovault, _assetOFT, _shareOFT) {}}
```VaultComposerSync is the orchestrator contract that enables cross-chain vault operations between the OFT standard and ERC-4626 vaults, automatically handling deposits and redemptions based on incoming token transfers.
The "Sync" in VaultComposerSync refers to synchronous vault operations - meaning the vault must support immediate, single-transaction deposits and redemptions without delays or waiting periods.
For Asynchronous VaultsFor asynchronous vaults that require multi-transaction redemptions, you will need to modify the MyOVaultComposer contract.
Share OFT (Spoke Chains)​```
// SPDX-License-Identifier: UNLICENSEDpragma solidity ^0.8.20;import { Ownable } from "@openzeppelin/contracts/access/Ownable.sol";import { OFT } from "@layerzerolabs/oft-evm/contracts/OFT.sol";/** * @title MyShareOFT * @notice ERC20 representation of the vault's share token on a spoke chain for cross-chain functionality * @dev This contract represents the vault's share tokens on spoke chains. It inherits from * LayerZero's OFT (Omnichain Fungible Token) to enable seamless cross-chain transfers of * vault shares between the hub chain and spoke chains. This contract is designed to work * with ERC4626-compliant vaults, enabling standardized cross-chain vault interactions. * * Share tokens represent ownership in the vault and can be redeemed for the underlying * asset on the hub chain. The OFT mechanism ensures that shares maintain their value and can be freely * moved across supported chains while preserving the vault's accounting integrity. */contract MyShareOFT is OFT {    /**     * @notice Constructs the Share OFT contract     * @dev Initializes the OFT with LayerZero endpoint and sets up ownership     * @param _name The name of the share token     * @param _symbol The symbol of the share token     * @param _lzEndpoint The address of the LayerZero endpoint on this chain     * @param _delegate The address that will have owner privileges     */    constructor(        string memory _name,        string memory _symbol,        address _lzEndpoint,        address _delegate    ) OFT(_name, _symbol, _lzEndpoint, _delegate) Ownable(_delegate) {        // WARNING: Do NOT mint share tokens directly as this breaks the vault's share-to-asset ratio        // Share tokens should only be minted by the vault contract during deposits to maintain        // the correct relationship between shares and underlying assets        // _mint(msg.sender, 1 ether); // ONLY uncomment for testing UI/integration, never in production    }}
```MyShareOFT is the OFT representation of the share token from the ERC4626 vault on other spoke chains. By default, OFT inherit the base ERC20 token standard.
cautionYou should NEVER implement _mint() in the constructor or externally in MyShareOFT. Since shares can be redeemed for assets on the hub chain, minting new supply breaks the conversion rate inside the ERC4626 vault.
Deployment and Wiring​
After reviewing the above OVault related contracts, follow these steps to deploy and wire the necessary pathways.
Creates standard OFT contracts for the vault's underlying asset.
1. Network Configuration​
Update hardhat.config.ts to include your desired networks:```
const config: HardhatUserConfig = {  networks: {    base: {      eid: EndpointId.BASESEP_V2_TESTNET,      url: process.env.RPC_URL_BASESEP_TESTNET || 'https://base-sepolia.gateway.tenderly.co',      accounts,    },    arbitrum: {      eid: EndpointId.ARBSEP_V2_TESTNET,      url: process.env.RPC_URL_ARBSEP_TESTNET || 'https://arbitrum-sepolia.gateway.tenderly.co',      accounts,    },    optimism: {      eid: EndpointId.OPTSEP_V2_TESTNET,      url: process.env.RPC_URL_OPTSEP_TESTNET || 'https://optimism-sepolia.gateway.tenderly.co',      accounts,    },  },  // ... rest of config};
```2. Deployment Configuration​
Configure your vault deployment in devtools/deployConfig.ts. This file controls which chains get which contracts and their deployment settings:Note: If your asset is already an OFT, you do not need to deploy a separate mesh. The only requirement is that the asset OFT supports the hub chain you are deploying to.Asset and share token networks don't need to perfectly overlap. Configure based on your requirements:```
import {EndpointId} from '@layerzerolabs/lz-definitions';export const DEPLOYMENT_CONFIG = {  // Vault chain configuration (where the ERC4626 vault lives)  vault: {    eid: EndpointId.ARBSEP_V2_TESTNET, // Your hub chain    contracts: {      vault: 'MyERC4626',      shareAdapter: 'MyShareOFTAdapter',      composer: 'MyOVaultComposer',    },    // IF YOU HAVE A PRE-DEPLOYED ASSET, SET THE ADDRESS HERE    assetAddress: undefined, // Set to '0x...' to use existing asset  },  // Asset OFT configuration (deployed on all chains)  asset: {    contract: 'MyAssetOFT',    metadata: {      name: 'MyAssetOFT',      symbol: 'ASSET',    },    chains: [      EndpointId.OPTSEP_V2_TESTNET,      EndpointId.BASESEP_V2_TESTNET,      EndpointId.ARBSEP_V2_TESTNET, // Include hub chain    ],  },  // Share OFT configuration (only on spoke chains)  share: {    contract: 'MyShareOFT',    metadata: {      name: 'MyShareOFT',      symbol: 'SHARE',    },    chains: [      EndpointId.OPTSEP_V2_TESTNET,      EndpointId.BASESEP_V2_TESTNET,      // Do NOT include hub chain (it uses ShareOFTAdapter)    ],  },};
```Key Configuration Points:• Hub Chain: Set vault.eid to your chosen hub chain's endpoint ID
• Asset Chains: Include all chains where you want asset OFTs (including the hub chain)
• Share Chains: Include only spoke chains (exclude hub, which uses the ShareOFTAdapter)
• Pre-deployed Asset: Set vault.assetAddress if using an existing asset tokenThe deployment scripts automatically determine what to deploy based on:• Vault contracts (ERC4626, ShareOFTAdapter, Composer) deploy only on the hub chain
• Asset OFTs deploy on chains listed in asset.chains (unless using pre-deployed asset)
• Share OFTs deploy on chains listed in share.chainsBuild​
Compile your contracts:```
pnpm compile
```infoIf you're deploying the asset OFT from scratch for testing purposes, you'll need to mint an initial supply. Uncomment the _mint line in the MyAssetOFT constructor to provide initial liquidity. This ensures you have tokens to test deposit and cross-chain transfer functionality.
cautionDo NOT mint share tokens directly in MyShareOFT. Share tokens must only be minted by the vault contract during deposits to maintain the correct share-to-asset ratio. Manually minting share tokens breaks the vault's accounting and can lead to incorrect redemption values. The mint line in MyShareOFT should only be uncommented for UI/integration testing, never in production.
Deploy​
Deploy all vault contracts across all configured chains:```
pnpm hardhat lz:deploy --tags ovault
```This single command will:• Deploy AssetOFTs to all chains in deployConfig.asset.chains
• Deploy the vault system (ERC4626, ShareOFTAdapter, Composer) on the hub chain
• Deploy ShareOFTs to all spoke chains in deployConfig.share.chainsThe deployment scripts automatically skip existing deployments, so you can safely run this command when expanding to new chains. Simply add the new chain endpoints to your deployConfig.ts and run the deploy command again.Tip: To deploy to specific networks only, use the --networks flag:```
pnpm hardhat lz:deploy --tags ovault --networks arbitrum,optimism
```3. Wire Asset and Share Mesh​```
# Configure LayerZero connectionspnpm hardhat lz:oapp:wire --oapp-config layerzero.asset.config.tspnpm hardhat lz:oapp:wire --oapp-config layerzero.share.config.ts
```This establishes the peer relationships between each OFT deployment, enabling cross-chain token transfers. See the OFT Wiring Step for more information.
Usage​
OVault enables four main operation patterns. Each uses the standard OFT.send() interface with the composer handling vault operations automatically.
Deposit Assets → Receive Shares on Same Chain​
Scenario: Deposit asset from Arbitrum, receive vault shares on Arbitrum```
# Using the CLI task (recommended)npx hardhat lz:ovault:send \  --src-eid 30110 --dst-eid 30110 \  --amount 100.0 --to 0xRecipient \  --token-type asset
```Flow:
ShareOFTAdapter(Hub)Vault(Hub)Composer(Hub)AssetOFT(Hub)AssetOFT(Arbitrum)User(Arbitrum)ShareOFTAdapter(Hub)Vault(Hub)Composer(Hub)AssetOFT(Hub)AssetOFT(Arbitrum)User(Arbitrum)#mermaid-svg-9820208{font-family:"trebuchet ms",verdana,arial,sans-serif;font-size:16px;fill:#ccc;}@keyframes edge-animation-frame{from{stroke-dashoffset:0;}}@keyframes dash{to{stroke-dashoffset:0;}}#mermaid-svg-9820208 .edge-animation-slow{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 50s linear infinite;stroke-linecap:round;}#mermaid-svg-9820208 .edge-animation-fast{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 20s linear infinite;stroke-linecap:round;}#mermaid-svg-9820208 .error-icon{fill:#a44141;}#mermaid-svg-9820208 .error-text{fill:#ddd;stroke:#ddd;}#mermaid-svg-9820208 .edge-thickness-normal{stroke-width:1px;}#mermaid-svg-9820208 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-svg-9820208 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-svg-9820208 .edge-thickness-invisible{stroke-width:0;fill:none;}#mermaid-svg-9820208 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-svg-9820208 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-svg-9820208 .marker{fill:lightgrey;stroke:lightgrey;}#mermaid-svg-9820208 .marker.cross{stroke:lightgrey;}#mermaid-svg-9820208 svg{font-family:"trebuchet ms",verdana,arial,sans-serif;font-size:16px;}#mermaid-svg-9820208 p{margin:0;}#mermaid-svg-9820208 .actor{stroke:#ccc;fill:#1f2020;}#mermaid-svg-9820208 text.actor>tspan{fill:lightgrey;stroke:none;}#mermaid-svg-9820208 .actor-line{stroke:#ccc;}#mermaid-svg-9820208 .messageLine0{stroke-width:1.5;stroke-dasharray:none;stroke:lightgrey;}#mermaid-svg-9820208 .messageLine1{stroke-width:1.5;stroke-dasharray:2,2;stroke:lightgrey;}#mermaid-svg-9820208 #arrowhead path{fill:lightgrey;stroke:lightgrey;}#mermaid-svg-9820208 .sequenceNumber{fill:black;}#mermaid-svg-9820208 #sequencenumber{fill:lightgrey;}#mermaid-svg-9820208 #crosshead path{fill:lightgrey;stroke:lightgrey;}#mermaid-svg-9820208 .messageText{fill:lightgrey;stroke:none;}#mermaid-svg-9820208 .labelBox{stroke:#ccc;fill:#1f2020;}#mermaid-svg-9820208 .labelText,#mermaid-svg-9820208 .labelText>tspan{fill:lightgrey;stroke:none;}#mermaid-svg-9820208 .loopText,#mermaid-svg-9820208 .loopText>tspan{fill:lightgrey;stroke:none;}#mermaid-svg-9820208 .loopLine{stroke-width:2px;stroke-dasharray:2,2;stroke:#ccc;fill:#ccc;}#mermaid-svg-9820208 .note{stroke:hsl(180, 0%, 18.3529411765%);fill:hsl(180, 1.5873015873%, 28.3529411765%);}#mermaid-svg-9820208 .noteText,#mermaid-svg-9820208 .noteText>tspan{fill:rgb(183.8476190475, 181.5523809523, 181.5523809523);stroke:none;}#mermaid-svg-9820208 .activation0{fill:hsl(180, 1.5873015873%, 28.3529411765%);stroke:#ccc;}#mermaid-svg-9820208 .activation1{fill:hsl(180, 1.5873015873%, 28.3529411765%);stroke:#ccc;}#mermaid-svg-9820208 .activation2{fill:hsl(180, 1.5873015873%, 28.3529411765%);stroke:#ccc;}#mermaid-svg-9820208 .actorPopupMenu{position:absolute;}#mermaid-svg-9820208 .actorPopupMenuPanel{position:absolute;fill:#1f2020;box-shadow:0px 8px 16px 0px rgba(0,0,0,0.2);filter:drop-shadow(3px 5px 2px rgb(0 0 0 / 0.4));}#mermaid-svg-9820208 .actor-man line{stroke:#ccc;fill:#1f2020;}#mermaid-svg-9820208 .actor-man circle,#mermaid-svg-9820208 line{stroke:#ccc;fill:#1f2020;stroke-width:2px;}#mermaid-svg-9820208 :root{--mermaid-font-family:"trebuchet ms",verdana,arial,sans-serif;}Arbitrum ChainHub ChainDetects asset deposit operationSingle transaction: Assets → Shares (same chain)send(asset, dstEid, composer, composeMsg)LayerZero transferlzReceive() → lzCompose()deposit(assets)shares mintedsend(shares, arbitrum, recipient)LayerZero transfer (shares)shares delivered
Deposit Assets → Receive Shares on Different Chain​
Scenario: Deposit asset from Arbitrum, receive vault shares on Optimism```
# Using the CLI task (recommended)npx hardhat lz:ovault:send \  --src-eid 30110 --dst-eid 30111 \  --amount 100.0 --to 0xRecipient \  --token-type asset
```Flow:
RecipientShareOFT(Optimism)ShareOFTAdapter(Hub)Vault(Hub)Composer(Hub)AssetOFT(Hub)AssetOFT(Arbitrum)User(Arbitrum)RecipientShareOFT(Optimism)ShareOFTAdapter(Hub)Vault(Hub)Composer(Hub)AssetOFT(Hub)AssetOFT(Arbitrum)User(Arbitrum)#mermaid-svg-1081244{font-family:"trebuchet ms",verdana,arial,sans-serif;font-size:16px;fill:#ccc;}@keyframes edge-animation-frame{from{stroke-dashoffset:0;}}@keyframes dash{to{stroke-dashoffset:0;}}#mermaid-svg-1081244 .edge-animation-slow{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 50s linear infinite;stroke-linecap:round;}#mermaid-svg-1081244 .edge-animation-fast{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 20s linear infinite;stroke-linecap:round;}#mermaid-svg-1081244 .error-icon{fill:#a44141;}#mermaid-svg-1081244 .error-text{fill:#ddd;stroke:#ddd;}#mermaid-svg-1081244 .edge-thickness-normal{stroke-width:1px;}#mermaid-svg-1081244 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-svg-1081244 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-svg-1081244 .edge-thickness-invisible{stroke-width:0;fill:none;}#mermaid-svg-1081244 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-svg-1081244 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-svg-1081244 .marker{fill:lightgrey;stroke:lightgrey;}#mermaid-svg-1081244 .marker.cross{stroke:lightgrey;}#mermaid-svg-1081244 svg{font-family:"trebuchet ms",verdana,arial,sans-serif;font-size:16px;}#mermaid-svg-1081244 p{margin:0;}#mermaid-svg-1081244 .actor{stroke:#ccc;fill:#1f2020;}#mermaid-svg-1081244 text.actor>tspan{fill:lightgrey;stroke:none;}#mermaid-svg-1081244 .actor-line{stroke:#ccc;}#mermaid-svg-1081244 .messageLine0{stroke-width:1.5;stroke-dasharray:none;stroke:lightgrey;}#mermaid-svg-1081244 .messageLine1{stroke-width:1.5;stroke-dasharray:2,2;stroke:lightgrey;}#mermaid-svg-1081244 #arrowhead path{fill:lightgrey;stroke:lightgrey;}#mermaid-svg-1081244 .sequenceNumber{fill:black;}#mermaid-svg-1081244 #sequencenumber{fill:lightgrey;}#mermaid-svg-1081244 #crosshead path{fill:lightgrey;stroke:lightgrey;}#mermaid-svg-1081244 .messageText{fill:lightgrey;stroke:none;}#mermaid-svg-1081244 .labelBox{stroke:#ccc;fill:#1f2020;}#mermaid-svg-1081244 .labelText,#mermaid-svg-1081244 .labelText>tspan{fill:lightgrey;stroke:none;}#mermaid-svg-1081244 .loopText,#mermaid-svg-1081244 .loopText>tspan{fill:lightgrey;stroke:none;}#mermaid-svg-1081244 .loopLine{stroke-width:2px;stroke-dasharray:2,2;stroke:#ccc;fill:#ccc;}#mermaid-svg-1081244 .note{stroke:hsl(180, 0%, 18.3529411765%);fill:hsl(180, 1.5873015873%, 28.3529411765%);}#mermaid-svg-1081244 .noteText,#mermaid-svg-1081244 .noteText>tspan{fill:rgb(183.8476190475, 181.5523809523, 181.5523809523);stroke:none;}#mermaid-svg-1081244 .activation0{fill:hsl(180, 1.5873015873%, 28.3529411765%);stroke:#ccc;}#mermaid-svg-1081244 .activation1{fill:hsl(180, 1.5873015873%, 28.3529411765%);stroke:#ccc;}#mermaid-svg-1081244 .activation2{fill:hsl(180, 1.5873015873%, 28.3529411765%);stroke:#ccc;}#mermaid-svg-1081244 .actorPopupMenu{position:absolute;}#mermaid-svg-1081244 .actorPopupMenuPanel{position:absolute;fill:#1f2020;box-shadow:0px 8px 16px 0px rgba(0,0,0,0.2);filter:drop-shadow(3px 5px 2px rgb(0 0 0 / 0.4));}#mermaid-svg-1081244 .actor-man line{stroke:#ccc;fill:#1f2020;}#mermaid-svg-1081244 .actor-man circle,#mermaid-svg-1081244 line{stroke:#ccc;fill:#1f2020;stroke-width:2px;}#mermaid-svg-1081244 :root{--mermaid-font-family:"trebuchet ms",verdana,arial,sans-serif;}Arbitrum ChainHub ChainOptimism ChainDetects asset deposit operationSingle transaction: Assets(Arbitrum) → Shares(Optimism)send(asset, dstEid, composer, composeMsg)LayerZero transferlzReceive() → lzCompose()deposit(assets)shares mintedsend(shares, optimism, recipient)LayerZero transfershares delivered
Deposit Assets → Receive Shares on Hub​
Scenario: Deposit asset from Arbitrum, receive vault shares on the hub chain```
npx hardhat lz:ovault:send \  --src-eid 30110 --dst-eid 30184 \  --amount 100.0 --to 0xRecipient \  --token-type asset
```Flow:
Recipient(Hub)Vault(Hub)Composer(Hub)AssetOFT(Hub)AssetOFT(Arbitrum)User(Arbitrum)Recipient(Hub)Vault(Hub)Composer(Hub)AssetOFT(Hub)AssetOFT(Arbitrum)User(Arbitrum)#mermaid-svg-7033757{font-family:"trebuchet ms",verdana,arial,sans-serif;font-size:16px;fill:#ccc;}@keyframes edge-animation-frame{from{stroke-dashoffset:0;}}@keyframes dash{to{stroke-dashoffset:0;}}#mermaid-svg-7033757 .edge-animation-slow{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 50s linear infinite;stroke-linecap:round;}#mermaid-svg-7033757 .edge-animation-fast{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 20s linear infinite;stroke-linecap:round;}#mermaid-svg-7033757 .error-icon{fill:#a44141;}#mermaid-svg-7033757 .error-text{fill:#ddd;stroke:#ddd;}#mermaid-svg-7033757 .edge-thickness-normal{stroke-width:1px;}#mermaid-svg-7033757 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-svg-7033757 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-svg-7033757 .edge-thickness-invisible{stroke-width:0;fill:none;}#mermaid-svg-7033757 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-svg-7033757 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-svg-7033757 .marker{fill:lightgrey;stroke:lightgrey;}#mermaid-svg-7033757 .marker.cross{stroke:lightgrey;}#mermaid-svg-7033757 svg{font-family:"trebuchet ms",verdana,arial,sans-serif;font-size:16px;}#mermaid-svg-7033757 p{margin:0;}#mermaid-svg-7033757 .actor{stroke:#ccc;fill:#1f2020;}#mermaid-svg-7033757 text.actor>tspan{fill:lightgrey;stroke:none;}#mermaid-svg-7033757 .actor-line{stroke:#ccc;}#mermaid-svg-7033757 .messageLine0{stroke-width:1.5;stroke-dasharray:none;stroke:lightgrey;}#mermaid-svg-7033757 .messageLine1{stroke-width:1.5;stroke-dasharray:2,2;stroke:lightgrey;}#mermaid-svg-7033757 #arrowhead path{fill:lightgrey;stroke:lightgrey;}#mermaid-svg-7033757 .sequenceNumber{fill:black;}#mermaid-svg-7033757 #sequencenumber{fill:lightgrey;}#mermaid-svg-7033757 #crosshead path{fill:lightgrey;stroke:lightgrey;}#mermaid-svg-7033757 .messageText{fill:lightgrey;stroke:none;}#mermaid-svg-7033757 .labelBox{stroke:#ccc;fill:#1f2020;}#mermaid-svg-7033757 .labelText,#mermaid-svg-7033757 .labelText>tspan{fill:lightgrey;stroke:none;}#mermaid-svg-7033757 .loopText,#mermaid-svg-7033757 .loopText>tspan{fill:lightgrey;stroke:none;}#mermaid-svg-7033757 .loopLine{stroke-width:2px;stroke-dasharray:2,2;stroke:#ccc;fill:#ccc;}#mermaid-svg-7033757 .note{stroke:hsl(180, 0%, 18.3529411765%);fill:hsl(180, 1.5873015873%, 28.3529411765%);}#mermaid-svg-7033757 .noteText,#mermaid-svg-7033757 .noteText>tspan{fill:rgb(183.8476190475, 181.5523809523, 181.5523809523);stroke:none;}#mermaid-svg-7033757 .activation0{fill:hsl(180, 1.5873015873%, 28.3529411765%);stroke:#ccc;}#mermaid-svg-7033757 .activation1{fill:hsl(180, 1.5873015873%, 28.3529411765%);stroke:#ccc;}#mermaid-svg-7033757 .activation2{fill:hsl(180, 1.5873015873%, 28.3529411765%);stroke:#ccc;}#mermaid-svg-7033757 .actorPopupMenu{position:absolute;}#mermaid-svg-7033757 .actorPopupMenuPanel{position:absolute;fill:#1f2020;box-shadow:0px 8px 16px 0px rgba(0,0,0,0.2);filter:drop-shadow(3px 5px 2px rgb(0 0 0 / 0.4));}#mermaid-svg-7033757 .actor-man line{stroke:#ccc;fill:#1f2020;}#mermaid-svg-7033757 .actor-man circle,#mermaid-svg-7033757 line{stroke:#ccc;fill:#1f2020;stroke-width:2px;}#mermaid-svg-7033757 :root{--mermaid-font-family:"trebuchet ms",verdana,arial,sans-serif;}Arbitrum ChainHub ChainDetects asset deposit operationdstEid == hubEid (local delivery)Single transaction: Assets(Arbitrum) → Shares(Hub)send(asset, dstEid, composer, composeMsg)LayerZero transferlzReceive() → lzCompose()deposit(assets)shares mintedDirect ERC20 transfer (shares)
Redeem Shares → Receive Assets on Different Chain​
Scenario: Redeem vault shares from Optimism, receive asset on Arbitrum```
npx hardhat lz:ovault:send \  --src-eid 30111 --dst-eid 30110 \  --amount 50.0 --to 0xRecipient \  --token-type share
```Flow:
Recipient(Arbitrum)AssetOFT(Arbitrum)AssetOFT(Hub)Vault(Hub)Composer(Hub)ShareOFTAdapter(Hub)ShareOFT(Optimism)User(Optimism)Recipient(Arbitrum)AssetOFT(Arbitrum)AssetOFT(Hub)Vault(Hub)Composer(Hub)ShareOFTAdapter(Hub)ShareOFT(Optimism)User(Optimism)#mermaid-svg-3126368{font-family:"trebuchet ms",verdana,arial,sans-serif;font-size:16px;fill:#ccc;}@keyframes edge-animation-frame{from{stroke-dashoffset:0;}}@keyframes dash{to{stroke-dashoffset:0;}}#mermaid-svg-3126368 .edge-animation-slow{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 50s linear infinite;stroke-linecap:round;}#mermaid-svg-3126368 .edge-animation-fast{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 20s linear infinite;stroke-linecap:round;}#mermaid-svg-3126368 .error-icon{fill:#a44141;}#mermaid-svg-3126368 .error-text{fill:#ddd;stroke:#ddd;}#mermaid-svg-3126368 .edge-thickness-normal{stroke-width:1px;}#mermaid-svg-3126368 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-svg-3126368 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-svg-3126368 .edge-thickness-invisible{stroke-width:0;fill:none;}#mermaid-svg-3126368 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-svg-3126368 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-svg-3126368 .marker{fill:lightgrey;stroke:lightgrey;}#mermaid-svg-3126368 .marker.cross{stroke:lightgrey;}#mermaid-svg-3126368 svg{font-family:"trebuchet ms",verdana,arial,sans-serif;font-size:16px;}#mermaid-svg-3126368 p{margin:0;}#mermaid-svg-3126368 .actor{stroke:#ccc;fill:#1f2020;}#mermaid-svg-3126368 text.actor>tspan{fill:lightgrey;stroke:none;}#mermaid-svg-3126368 .actor-line{stroke:#ccc;}#mermaid-svg-3126368 .messageLine0{stroke-width:1.5;stroke-dasharray:none;stroke:lightgrey;}#mermaid-svg-3126368 .messageLine1{stroke-width:1.5;stroke-dasharray:2,2;stroke:lightgrey;}#mermaid-svg-3126368 #arrowhead path{fill:lightgrey;stroke:lightgrey;}#mermaid-svg-3126368 .sequenceNumber{fill:black;}#mermaid-svg-3126368 #sequencenumber{fill:lightgrey;}#mermaid-svg-3126368 #crosshead path{fill:lightgrey;stroke:lightgrey;}#mermaid-svg-3126368 .messageText{fill:lightgrey;stroke:none;}#mermaid-svg-3126368 .labelBox{stroke:#ccc;fill:#1f2020;}#mermaid-svg-3126368 .labelText,#mermaid-svg-3126368 .labelText>tspan{fill:lightgrey;stroke:none;}#mermaid-svg-3126368 .loopText,#mermaid-svg-3126368 .loopText>tspan{fill:lightgrey;stroke:none;}#mermaid-svg-3126368 .loopLine{stroke-width:2px;stroke-dasharray:2,2;stroke:#ccc;fill:#ccc;}#mermaid-svg-3126368 .note{stroke:hsl(180, 0%, 18.3529411765%);fill:hsl(180, 1.5873015873%, 28.3529411765%);}#mermaid-svg-3126368 .noteText,#mermaid-svg-3126368 .noteText>tspan{fill:rgb(183.8476190475, 181.5523809523, 181.5523809523);stroke:none;}#mermaid-svg-3126368 .activation0{fill:hsl(180, 1.5873015873%, 28.3529411765%);stroke:#ccc;}#mermaid-svg-3126368 .activation1{fill:hsl(180, 1.5873015873%, 28.3529411765%);stroke:#ccc;}#mermaid-svg-3126368 .activation2{fill:hsl(180, 1.5873015873%, 28.3529411765%);stroke:#ccc;}#mermaid-svg-3126368 .actorPopupMenu{position:absolute;}#mermaid-svg-3126368 .actorPopupMenuPanel{position:absolute;fill:#1f2020;box-shadow:0px 8px 16px 0px rgba(0,0,0,0.2);filter:drop-shadow(3px 5px 2px rgb(0 0 0 / 0.4));}#mermaid-svg-3126368 .actor-man line{stroke:#ccc;fill:#1f2020;}#mermaid-svg-3126368 .actor-man circle,#mermaid-svg-3126368 line{stroke:#ccc;fill:#1f2020;stroke-width:2px;}#mermaid-svg-3126368 :root{--mermaid-font-family:"trebuchet ms",verdana,arial,sans-serif;}Optimism ChainHub ChainArbitrum ChainDetects share redeem operationSingle transaction: Shares(Optimism) → Assets(Arbitrum)send(shares, dstEid, composer, composeMsg)LayerZero transferlzReceive() → lzCompose()redeem(shares)assets returnedsend(assets, arbitrum, recipient)LayerZero transferassets delivered
Redeem Shares → Receive Assets on Hub​
Scenario: Redeem vault shares from Optimism, receive asset on the hub chain```
npx hardhat lz:ovault:send \  --src-eid 30111 --dst-eid 30184 \  --amount 50.0 --to 0xRecipient \  --token-type share
```Flow:
Recipient(Hub)Vault(Hub)Composer(Hub)ShareOFTAdapter(Hub)ShareOFT(Optimism)User(Optimism)Recipient(Hub)Vault(Hub)Composer(Hub)ShareOFTAdapter(Hub)ShareOFT(Optimism)User(Optimism)#mermaid-svg-5520438{font-family:"trebuchet ms",verdana,arial,sans-serif;font-size:16px;fill:#ccc;}@keyframes edge-animation-frame{from{stroke-dashoffset:0;}}@keyframes dash{to{stroke-dashoffset:0;}}#mermaid-svg-5520438 .edge-animation-slow{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 50s linear infinite;stroke-linecap:round;}#mermaid-svg-5520438 .edge-animation-fast{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 20s linear infinite;stroke-linecap:round;}#mermaid-svg-5520438 .error-icon{fill:#a44141;}#mermaid-svg-5520438 .error-text{fill:#ddd;stroke:#ddd;}#mermaid-svg-5520438 .edge-thickness-normal{stroke-width:1px;}#mermaid-svg-5520438 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-svg-5520438 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-svg-5520438 .edge-thickness-invisible{stroke-width:0;fill:none;}#mermaid-svg-5520438 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-svg-5520438 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-svg-5520438 .marker{fill:lightgrey;stroke:lightgrey;}#mermaid-svg-5520438 .marker.cross{stroke:lightgrey;}#mermaid-svg-5520438 svg{font-family:"trebuchet ms",verdana,arial,sans-serif;font-size:16px;}#mermaid-svg-5520438 p{margin:0;}#mermaid-svg-5520438 .actor{stroke:#ccc;fill:#1f2020;}#mermaid-svg-5520438 text.actor>tspan{fill:lightgrey;stroke:none;}#mermaid-svg-5520438 .actor-line{stroke:#ccc;}#mermaid-svg-5520438 .messageLine0{stroke-width:1.5;stroke-dasharray:none;stroke:lightgrey;}#mermaid-svg-5520438 .messageLine1{stroke-width:1.5;stroke-dasharray:2,2;stroke:lightgrey;}#mermaid-svg-5520438 #arrowhead path{fill:lightgrey;stroke:lightgrey;}#mermaid-svg-5520438 .sequenceNumber{fill:black;}#mermaid-svg-5520438 #sequencenumber{fill:lightgrey;}#mermaid-svg-5520438 #crosshead path{fill:lightgrey;stroke:lightgrey;}#mermaid-svg-5520438 .messageText{fill:lightgrey;stroke:none;}#mermaid-svg-5520438 .labelBox{stroke:#ccc;fill:#1f2020;}#mermaid-svg-5520438 .labelText,#mermaid-svg-5520438 .labelText>tspan{fill:lightgrey;stroke:none;}#mermaid-svg-5520438 .loopText,#mermaid-svg-5520438 .loopText>tspan{fill:lightgrey;stroke:none;}#mermaid-svg-5520438 .loopLine{stroke-width:2px;stroke-dasharray:2,2;stroke:#ccc;fill:#ccc;}#mermaid-svg-5520438 .note{stroke:hsl(180, 0%, 18.3529411765%);fill:hsl(180, 1.5873015873%, 28.3529411765%);}#mermaid-svg-5520438 .noteText,#mermaid-svg-5520438 .noteText>tspan{fill:rgb(183.8476190475, 181.5523809523, 181.5523809523);stroke:none;}#mermaid-svg-5520438 .activation0{fill:hsl(180, 1.5873015873%, 28.3529411765%);stroke:#ccc;}#mermaid-svg-5520438 .activation1{fill:hsl(180, 1.5873015873%, 28.3529411765%);stroke:#ccc;}#mermaid-svg-5520438 .activation2{fill:hsl(180, 1.5873015873%, 28.3529411765%);stroke:#ccc;}#mermaid-svg-5520438 .actorPopupMenu{position:absolute;}#mermaid-svg-5520438 .actorPopupMenuPanel{position:absolute;fill:#1f2020;box-shadow:0px 8px 16px 0px rgba(0,0,0,0.2);filter:drop-shadow(3px 5px 2px rgb(0 0 0 / 0.4));}#mermaid-svg-5520438 .actor-man line{stroke:#ccc;fill:#1f2020;}#mermaid-svg-5520438 .actor-man circle,#mermaid-svg-5520438 line{stroke:#ccc;fill:#1f2020;stroke-width:2px;}#mermaid-svg-5520438 :root{--mermaid-font-family:"trebuchet ms",verdana,arial,sans-serif;}Optimism ChainHub ChainDetects share redeem operationdstEid == hubEid (local delivery)Single transaction: Shares(Optimism) → Assets(Hub)send(shares, dstEid, composer, composeMsg)LayerZero transferlzReceive() → lzCompose()redeem(shares)assets returnedDirect ERC20 transfer (assets)
SDK Integration​
For programmatic integration, use the official @layerzerolabs/lz-ovault-sdk which simplifies OVault operations by using viem to generate the necessary calldata for calling OFT.send() with the proper composeMsg for the hub composer.
The SDK's OVaultMessageBuilder.generateOVaultInputs() method handles all the complex message encoding and returns ready-to-use transaction parameters for viem wallet clients.```
import {OVaultMessageBuilder, OVaultOperations} from '@layerzerolabs/lz-ovault-sdk';const inputs = await OVaultMessageBuilder.generateOVaultInputs({  srcEid: 40245, // Base Sepolia  hubEid: 40231, // Arbitrum Sepolia  dstEid: 40245, // Base Sepolia  operation: OVaultOperations.DEPOSIT,  amount: 100000000000000000n,  slippage: 0.01, // 1%  // ... other required parameters});// Use inputs.contractAddress, inputs.abi, inputs.txArgs with VIEM
```For complete usage examples, API reference, and advanced configuration, see the SDK repository.
For manual integration and advanced usage, see the Technical Reference section below.
Technical Reference​
OVault operations follow a two-phase architecture where failures and slippage protection occur in distinct stages:
Two-Phase Operation Flow​
Phase 1: Source → Hub (Standard OFT)• User calls OFT.send() targeting the hub composer
• Standard LayerZero transfer with compose message
• Reliable transfer with minimal failure modesPhase 2: Hub Operations + Output Routing• Composer executes vault operations (deposit/redeem)
• Critical slippage point: Vault conversion rates may have changed
• Output tokens routed to final destination (local or cross-chain)Operation Detection​
The composer automatically determines the vault operation based on which OFT sent the tokens:• AssetOFT caller → Triggers deposit operation (assets → shares)
• ShareOFT caller → Triggers redeem operation (shares → assets)Slippage Protection Strategy​
Since the real slippage occurs during vault operations on the hub, the composeMsg contains the critical slippage parameters:• Phase 1 minAmountLD: Set for source token (not critical for vault rates)
• Phase 2 minAmountLD: Set in composeMsg for vault output (critical protection)1. Standard OFT Transfer Initiation​
Users call the standard OFT interface with compose instructions:```
// Standard OFT send with compose messageassetOFT.send(    SendParam({        dstEid: hubEid,           // Always send to hub first        to: bytes32(composer),    // VaultComposerSync address        amountLD: depositAmount,        minAmountLD: minDepositAmount,    // Slippage protection        extraOptions: "...",      // Gas for compose + second hop        composeMsg: composeMsg,  // Second SendParam + minMsgValue        oftCmd: ""    }),    MessagingFee(msg.value, 0),    refundAddress);
```2a. Composer Message Reception​
When tokens arrive at the hub via lzReceive(), the composer is triggered via lzCompose():```
function lzCompose(    address _composeCaller,  // Either ASSET_OFT or SHARE_OFT    bytes32 _guid,    bytes calldata _message, // Contains routing instructions    address _executor,    bytes calldata _extraData) external payable
```The compose message contains the Phase 2 routing instructions with critical slippage protection:```
// Decoded in handleCompose() - this controls Phase 2 behavior(SendParam memory sendParam, uint256 minMsgValue) = abi.decode(    _composeMsg,    (SendParam, uint256));// SendParam for vault output routing:// - dstEid: Target chain for output tokens// - to: Final recipient address// - amountLD: Updated by composer to actual vault output// - minAmountLD: CRITICAL - protects against vault rate slippage// - extraOptions: Gas settings for destination transfer// - composeMsg: Empty (no nested compose)// - oftCmd: Empty (no OFT commands)
```2b. Operation Detection & Execution​
The composer automatically determines the vault operation based on which OFT sent the tokens:
Asset Deposit Flow (AssetOFT → Composer):```
function _depositAndSend() {    // 1. Deposit assets into vault    uint256 shareAmount = VAULT.deposit(_assetAmount, address(this));    // 2. Verify slippage protection    _assertSlippage(shareAmount, _sendParam.minAmountLD);    // 3. Route shares to final destination    _send(SHARE_OFT, shareAmount, _refundAddress);}
```Share Redemption Flow (ShareOFT → Composer):```
function _redeemAndSend() {    // 1. Redeem shares from vault    uint256 assetAmount = VAULT.redeem(_shareAmount, address(this), address(this));    // 2. Verify slippage protection    _assertSlippage(assetAmount, _sendParam.minAmountLD);    // 3. Route assets to final destination    _send(ASSET_OFT, assetAmount, _refundAddress);}
```2c. Smart Output Routing​
The _send() function handles both local and cross-chain delivery:```
function _send(address _oft, SendParam memory _sendParam, address _refundAddress) {    if (_sendParam.dstEid == VAULT_EID) {        // Same chain: Direct ERC20 transfer (no LayerZero fees)        address erc20 = _oft == ASSET_OFT ? ASSET_ERC20 : SHARE_ERC20;        IERC20(erc20).safeTransfer(_sendParam.to.bytes32ToAddress(), _sendParam.amountLD);    } else {        // Cross-chain: Standard OFT send        IOFT(_oft).send{ value: msg.value }(_sendParam, MessagingFee(msg.value, 0), _refundAddress);    }}
```Key Implementation Tips​1. Start Simple: Deploy a basic vault first, add yield strategies later
2. Test Thoroughly: Each operation type has different gas requirements
3. Monitor Closely: Set up alerts for failed compose messages
4. Plan Recovery: Document procedures for each failure scenario
5. Optimize Gas: Use the task's automatic optimization, adjust as neededTroubleshooting​
OVault operations have only two possible final outcomes: Success or Failed (but Refunded). Understanding the failure flow helps determine appropriate recovery actions.
#mermaid-svg-8178504{font-family:"trebuchet ms",verdana,arial,sans-serif;font-size:16px;fill:#ccc;}@keyframes edge-animation-frame{from{stroke-dashoffset:0;}}@keyframes dash{to{stroke-dashoffset:0;}}#mermaid-svg-8178504 .edge-animation-slow{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 50s linear infinite;stroke-linecap:round;}#mermaid-svg-8178504 .edge-animation-fast{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 20s linear infinite;stroke-linecap:round;}#mermaid-svg-8178504 .error-icon{fill:#a44141;}#mermaid-svg-8178504 .error-text{fill:#ddd;stroke:#ddd;}#mermaid-svg-8178504 .edge-thickness-normal{stroke-width:1px;}#mermaid-svg-8178504 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-svg-8178504 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-svg-8178504 .edge-thickness-invisible{stroke-width:0;fill:none;}#mermaid-svg-8178504 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-svg-8178504 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-svg-8178504 .marker{fill:lightgrey;stroke:lightgrey;}#mermaid-svg-8178504 .marker.cross{stroke:lightgrey;}#mermaid-svg-8178504 svg{font-family:"trebuchet ms",verdana,arial,sans-serif;font-size:16px;}#mermaid-svg-8178504 p{margin:0;}#mermaid-svg-8178504 .label{font-family:"trebuchet ms",verdana,arial,sans-serif;color:#ccc;}#mermaid-svg-8178504 .cluster-label text{fill:#F9FFFE;}#mermaid-svg-8178504 .cluster-label span{color:#F9FFFE;}#mermaid-svg-8178504 .cluster-label span p{background-color:transparent;}#mermaid-svg-8178504 .label text,#mermaid-svg-8178504 span{fill:#ccc;color:#ccc;}#mermaid-svg-8178504 .node rect,#mermaid-svg-8178504 .node circle,#mermaid-svg-8178504 .node ellipse,#mermaid-svg-8178504 .node polygon,#mermaid-svg-8178504 .node path{fill:#1f2020;stroke:#ccc;stroke-width:1px;}#mermaid-svg-8178504 .rough-node .label text,#mermaid-svg-8178504 .node .label text,#mermaid-svg-8178504 .image-shape .label,#mermaid-svg-8178504 .icon-shape .label{text-anchor:middle;}#mermaid-svg-8178504 .node .katex path{fill:#000;stroke:#000;stroke-width:1px;}#mermaid-svg-8178504 .rough-node .label,#mermaid-svg-8178504 .node .label,#mermaid-svg-8178504 .image-shape .label,#mermaid-svg-8178504 .icon-shape .label{text-align:center;}#mermaid-svg-8178504 .node.clickable{cursor:pointer;}#mermaid-svg-8178504 .root .anchor path{fill:lightgrey!important;stroke-width:0;stroke:lightgrey;}#mermaid-svg-8178504 .arrowheadPath{fill:lightgrey;}#mermaid-svg-8178504 .edgePath .path{stroke:lightgrey;stroke-width:2.0px;}#mermaid-svg-8178504 .flowchart-link{stroke:lightgrey;fill:none;}#mermaid-svg-8178504 .edgeLabel{background-color:hsl(0, 0%, 34.4117647059%);text-align:center;}#mermaid-svg-8178504 .edgeLabel p{background-color:hsl(0, 0%, 34.4117647059%);}#mermaid-svg-8178504 .edgeLabel rect{opacity:0.5;background-color:hsl(0, 0%, 34.4117647059%);fill:hsl(0, 0%, 34.4117647059%);}#mermaid-svg-8178504 .labelBkg{background-color:rgba(87.75, 87.75, 87.75, 0.5);}#mermaid-svg-8178504 .cluster rect{fill:hsl(180, 1.5873015873%, 28.3529411765%);stroke:rgba(255, 255, 255, 0.25);stroke-width:1px;}#mermaid-svg-8178504 .cluster text{fill:#F9FFFE;}#mermaid-svg-8178504 .cluster span{color:#F9FFFE;}#mermaid-svg-8178504 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:"trebuchet ms",verdana,arial,sans-serif;font-size:12px;background:hsl(20, 1.5873015873%, 12.3529411765%);border:1px solid rgba(255, 255, 255, 0.25);border-radius:2px;pointer-events:none;z-index:100;}#mermaid-svg-8178504 .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#ccc;}#mermaid-svg-8178504 rect.text{fill:none;stroke-width:0;}#mermaid-svg-8178504 .icon-shape,#mermaid-svg-8178504 .image-shape{background-color:hsl(0, 0%, 34.4117647059%);text-align:center;}#mermaid-svg-8178504 .icon-shape p,#mermaid-svg-8178504 .image-shape p{background-color:hsl(0, 0%, 34.4117647059%);padding:2px;}#mermaid-svg-8178504 .icon-shape rect,#mermaid-svg-8178504 .image-shape rect{opacity:0.5;background-color:hsl(0, 0%, 34.4117647059%);fill:hsl(0, 0%, 34.4117647059%);}#mermaid-svg-8178504 .label-icon{display:inline-block;height:1em;overflow:visible;vertical-align:-0.125em;}#mermaid-svg-8178504 .node .label-icon path{fill:currentColor;stroke:revert;stroke-width:revert;}#mermaid-svg-8178504 :root{--mermaid-font-family:"trebuchet ms",verdana,arial,sans-serif;}YesNoYesNoYesNoUser calls OFT.sendwith composeMsgLayerZero OFT transferSource → Hub chainLayerZero transfersuccessful?LZ Executor calls lzReceiveOFT credits tokens to composerTransaction revertsNo tokens movedOFT calls endpoint.sendComposeStores composeMsg for executionLZ Executor calls lzComposeon VaultComposerSynctry-catch around handleComposeProtects against composer failuresmsg.value sufficientfor destination delivery?Vault operation executesvault.deposit or vault.redeemInsufficientMsgValue reverttry-catch triggers _refundactualAmount from vault outputshares or assets receivedactualAmount >= minAmountLDfrom composeMsg?Update SendParam.amountLDReset minAmountLD to zerorevert SlippageExceededtry-catch triggers _refund_send executesHub → Destination or local transfer✓ Operation completeTokens delivered to recipientUser retries withadjusted slippage tolerance
Refund Scenarios and Recovery​
The VaultComposerSync uses a try-catch pattern around handleCompose() to ensure robust error handling:```
try this.handleCompose{ value: msg.value }(/*...*/) {    emit Sent(_guid);} catch (bytes memory _err) {    // Automatic refund for any handleCompose failures    _refund(_composeCaller, _message, amount, tx.origin);    emit Refunded(_guid);}
```Common scenarios caught by try-catch:• InsufficientMsgValue - insufficient gas for destination delivery → Auto refund
• SlippageExceeded - vault output below minimum → Manual refund available
• Vault operational errors (paused, insufficient liquidity) → Manual refund availableTransaction Revert: Gas or Fee Issues​
What happens: OFT transfer fails on source chain before any tokens move
Common causes:• Insufficient native tokens for LayerZero fees
• Invalid destination endpoint configuration
• Gas estimation errorsUser experience: Transaction reverts immediately, no tokens transferred
Recovery: User can retry immediately after fixing the issue• Use quoteSend() to get accurate fee estimation
• Verify destination chain configuration
• Ensure sufficient native tokens for cross-chain feesAutomatic Refund: Insufficient msg.value for Second Hop​
What happens: LayerZero completes lzReceive and lzCompose successfully, but insufficient gas for destination delivery
Technical flow:1. LZ Executor calls lzReceive() - tokens credited to composer ✓
2. OFT calls endpoint.sendCompose() - composeMsg stored ✓
3. LZ Executor calls lzCompose() on VaultComposerSync ✓
4. Try-catch around handleCompose() catches InsufficientMsgValue revert
5. Automatic _refund() triggered back to source chainCommon causes:• Underestimated gas for second hop during quoteSend()
• Gas price fluctuations between quote and execution
• Complex destination chain operations requiring more gasUser experience:• Cross-chain transfer appears successful initially
• Composer automatically triggers refund to source chain
• Original tokens returned within minutesRecovery: Automatic - no user action required• Monitor source chain for refunded tokens
• Retry with higher gas estimate from quoteSend()Manual Refund: Vault Operation Issues​
What happens: LayerZero flow completes successfully, but vault operation fails slippage check
Technical flow:1. LZ Executor calls lzReceive() - tokens credited to composer ✓
2. OFT calls endpoint.sendCompose() - composeMsg stored ✓
3. LZ Executor calls lzCompose() on VaultComposerSync ✓
4. Try-catch around handleCompose() executes vault operation ✓
5. Vault returns actualAmount (shares or assets)
6. Slippage check: actualAmount >= minAmountLD FAILS
7. SlippageExceeded revert caught by try-catch
8. Manual _refund() available (user must trigger)Common causes:• Vault share/asset price changed during cross-chain transfer
• Vault hit deposit/withdrawal limits between quote and execution
• minAmountLD set too high based on stale previewDeposit/previewRedeem dataUser experience:• Cross-chain transfer succeeds
• Vault operation fails on hub with slippage error
• Tokens held by composer awaiting user actionRecovery: User must manually trigger refund from hub chain1. Switch wallet to hub chain network
2. Call composer refund function
3. Original tokens returned to source chain
4. Retry operation with adjusted slippage tolerancePrevention:• Use wider slippage tolerance (2-5% for volatile vaults)
• Check vault limits: vault.maxDeposit(), vault.maxRedeem()
• Monitor vault state with vault.previewDeposit() before large operations
• Account for time delays in cross-chain operations when setting minAmountLDDebugging Tools​1. LayerZero Scan: Track cross-chain message status and identify failure points
2. Hub Chain Explorer: Check composer transaction details and vault interaction logs
3. Vault State Queries:• vault.previewDeposit(amount) - Estimate shares received
• vault.previewRedeem(shares) - Estimate assets received
• vault.maxDeposit(user) - Check deposit limits
• vault.maxRedeem(user) - Check redemption limits
4. Composer State: Check if refunds are available for failed operations

---
Note: This content was extracted from the LayerZero documentation. Tables and special components have been converted to plain text for better readability.
